/**
* Name: FinalAssignment
* Based on the internal empty template. 
* Author: Filip
* Tags: 
*/

//Need 2 different places people can meet.
//Show number of zombies over time
//Vs peple and soldiers

model FinalAssignment
global{
	geometry shape <- square(200#m);
	int zombies -> {length(Zombie)};
    int humans -> {length(agents where(each is Human))};
	init{
		int scenario <- 8 ;
		if scenario = 0{
			create FoodStall number:3;
			create Zombie number: 5;
			create Guest number: 40;
			create Soldier number: 1;
		} else if scenario = 1 {
			//Testing a single soldier shooting & fleeing.
			create Zombie with: (location:{50,60,0});
			create Soldier with: (location:{50,50,0});
			create Zombie with: (location:{50,40,0});
		} else if scenario = 2 {
			//Testing Technician with Protecting Soldier, vs Zombies.
			//Soldier should not flee?
			create Zombie with: (location:{50,65,0});
			create Soldier with: (location:{50,50,0});
			create Technician with: (location:{50,55,0});
			create Zombie with: (location:{50,35,0});
		} else if scenario = 3{
			create FoodStall number:6;
			create Zombie number: 15;
			create Punk number: 30;
			create Hippie number: 30;
			create Soldier number: 10;
			create Bunker number:1;
			create RadioMast number:1;
			create Technician number:1;

		} else if scenario = 4{
			//Test having people inside the bunker
			create Bunker with: (location:{100,100,0}, isActive:true);
			//Zombie should die on tick 1
			create Zombie number: 1 with: (location:{90,90,0});
			//Human should be fed
			create Guest number: 1 with: (location:{110,110,0}, hunger:498, safetyBunker:one_of(Bunker));
		} else if scenario = 5 {
			create FoodStall with: (location:{50,50,0}, rowdiness : 100);
			create FoodStall with: (location:{100,100,0}, chillness:100);
			create Punk with: (location:{50,50,0}, hunger: 400, knownFoodPlaces:[FoodStall at 0]);
			create Punk with: (location:{100,100,0}, hunger:400, knownFoodPlaces:[FoodStall at 1]);
			
		}else if scenario = 6 {
			//Soldier kicks out punk at foodstall 0 for being too rowdy.
			create FoodStall with: (location:{50,50,0});
			create FoodStall with: (location:{100,100,0});
			create Punk with: (location:{50,50,0}, hunger: 400, knownFoodPlaces:[FoodStall at 0]);
			create Soldier with: (location:{50,50,0}, hunger: 400, knownFoodPlaces:[FoodStall at 0]);
			create Punk with: (location:{100,100,0}, hunger:400, knownFoodPlaces:[FoodStall at 1]);
		}else if scenario = 7{
			//Hippie at Foodstall increases chill, so Soldier does not kick him out.
			create FoodStall with: (location:{50,50,0});
			create FoodStall with: (location:{100,100,0});
			create Punk with: (location:{50,50,0}, hunger: 400, knownFoodPlaces:[FoodStall at 0]);
			create Hippie with: (location:{50,50,0}, hunger: 400, knownFoodPlaces:[FoodStall at 0]);
			create Soldier with: (location:{50,50,0}, hunger: 400, knownFoodPlaces:[FoodStall at 0]);
			create Punk with: (location:{100,100,0}, hunger:400, knownFoodPlaces:[FoodStall at 1]);
		} else if scenario = 8{
			create FoodStall number:3;
			create Zombie number: 30;
			create Punk number: 15;
			create Hippie number: 15;
			create Soldier number: 5;
			create Bunker number:1;
			create RadioMast number:1;
			create Technician number:1;

		}
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
species Base_Person skills:[moving]{
	init{
		speed <- 1.0;	
	}
	rgb myColor <- #aqua;
	float sightRange <- 20.0;
	bool isIdle <- true;
	string textBubble <-"";
	
	aspect default{
		draw sphere(1) at: {location.x,location.y,location.z+2} color:myColor;
		draw pyramid(2) at: location color:myColor;		
		draw textBubble at:location+{-3,0,4};
	}
	
	reflex beIdle when: isIdle{
		do wander amplitude:90.0;
	}
}

//Used to categorize all humans, as opposed to zombies.
species Human parent: Base_Person skills:[fipa]{
	Bunker safetyBunker <- nil;
	list<string> funnyDeaths <- ["Blergh", "Oh no!", "Argh!", "Cruel world!", "Damn!", "I died!"];
	
	//Just a fun function that prints human's deaths out.
	action descriptiveDeath{
		write name+":"+one_of(funnyDeaths)+"X(";
		do die;
	}
	list zombiesInSight -> { Zombie at_distance(sightRange)};
	
	list<FoodStall> stallsWithinSight -> {FoodStall where(each.location distance_to location < sightRange)};
	FoodStall targetFoodStall <- nil;

	//When people get hungry, they start looking for food
	bool isHungry -> hunger > 299;
	
	//Everyone begins knowing about a random food stall.
	list<FoodStall> knownFoodPlaces <- [one_of(FoodStall)];
	//Places this human does not like to go to
	list<FoodStall> badFoodStalls <-[];
	
	//When a guest becomes hungry, they pick a place to eat food.
	reflex pickFoodStall when: (isHungry and targetFoodStall = nil){
		targetFoodStall <- (knownFoodPlaces where !(badFoodStalls contains(each))) closest_to location;
	}
	
	//When a human has picked a place to go eat, and is safe from zombies, they head towards a food place	
	reflex moveTowardsFood when: (empty(zombiesInSight) and targetFoodStall != nil and safetyBunker  = nil){
		textBubble <- "Hungry";
		isIdle <-false;
		do goto (targetFoodStall.location);
	}
	
	//Head Towards bunker until you are inside.
	reflex headTowardsBunker when: (empty(zombiesInSight) and safetyBunker != nil and !(agents_inside(safetyBunker) contains(self))){
		isIdle <-false;
		do goto(safetyBunker);
	}
	
	//Wander around in bunker.
	reflex wanderInBunker when:(safetyBunker != nil and agents_inside(safetyBunker) contains(self)) {
		do wander bounds:safetyBunker.shape amplitude:90.0 speed:0.4;
	}
	
	//While at food stall, eat food until no longer hungry
	reflex eatFood when:(targetFoodStall != nil and hunger !=0 and location distance_to targetFoodStall < 2) {
		hunger <- hunger - 10;
		textBubble <- "Eating";
		isIdle <- false;
	}
	
	//Remembers new food stalls when they are in sight.
	reflex learnNewFoodPlace when: !empty(stallsWithinSight){
		loop newFoodPlace over: (stallsWithinSight where(!(knownFoodPlaces contains(each)))){
			knownFoodPlaces <- knownFoodPlaces + newFoodPlace;
		}
	}
	
	//Resets target food stall when not hungry, or run away from zombies 
	reflex resetTargetFoodStall when:(targetFoodStall != nil and (hunger=0 or !empty(zombiesInSight))){
		targetFoodStall <-  nil;
	}
	
	//When the guest becomes too hungry, they die of starvation.
	reflex starveToDeath when: hunger = starvationLevel {
		write name+": Died of starvation";
		do die;
		if(flip(0.10)){create Zombie number: 1 with:(location:location);}
	}
	
	//Level at which this person will starve to death
	int starvationLevel <- 500;
	int hunger <- rnd(0,100) update: hunger + rnd(0,1) max: starvationLevel min:0;
	action fleeFromZombies{
		//Do not need to flee from zombies inside the bunker
		if(agents_inside(safetyBunker) contains (self)){
			return;
		}
		isIdle <-false;
		textBubble <- "Fleeing";
		//Zombie enemy <- zombiesInSight closest_to(location);
		float newHeading <- 0.0;
		
		//Naive way of handling multiple zombies, where we look to find avoid every zombie equally. 
		//Will run to opposite direction with 1 zombie, succesfully avoid 2 opposite each other, and attempt to handle more.
		//Could be elaborated with weights depending on enemy distance to ourselves.
		loop enemy over: zombiesInSight{
			//Opposite of angle towards enemy
			float oppositeOfEnemy <- 180+(atan2(enemy.location.y-location.y, enemy.location.x-location.x));
			newHeading <- newHeading+oppositeOfEnemy;
		}
		//Take the mean of all angles that avoid zombies. Simplistic, but works for a lot of cases.
		newHeading <- newHeading / length(zombiesInSight);
		
		//If we are at a world edge, we should avoid moving into the wall..
		int x <- 90;
		if location.y <= 2 { //top wall
			newHeading <- newHeading+x;
		} else if location.y >= world.shape.height-2 {//bottom wall
			newHeading <- newHeading+x;
		}
		if location.x <= 2{//left wall
			newHeading <- newHeading+x;
		} else if location.x >= world.shape.width-2{
			newHeading <- newHeading+x;//right wall
		}
		do move heading:newHeading ;
	}

	reflex learnOfBunker when:(!empty(informs)){
		message inform <- informs at 0;
		safetyBunker <- list(inform.contents)[0];
	}
}

//Wants to eat people
species Zombie parent: Base_Person {
	rgb myColor <- #black;
	init{
		sightRange <- rnd(15.0,20.0);
		speed <- rnd(0.8,0.9);
		write "Brains!";
	}
	
	//Keeps track of how many cycles remain to consume a person
	int eatingCounter <-0;
	
	//Range at which Zombie can eat people
	float killRange <- 2.0;
	
	//List of nearby Humans
	list<Human>  humansInSight -> {list<Human>(agents_at_distance(sightRange) where(each is Human))};
	
	//Humans that we can eat
	list<Human>  eatableHumans -> {list<Human>(agents_at_distance(killRange) where(each is Human))};
	
	//Hunt nearest person in sight
	reflex huntPeople when: !empty(humansInSight) and eatingCounter = 0{
		Base_Person target <- humansInSight closest_to location; 
		do goto target:target;
		textBubble <- "Hunting";
		isIdle <-false;
	}
	
	//Kill and eat a person, and delay for a few cycles while eating them
	reflex killPerson when: !empty(eatableHumans) {
		Human target <- eatableHumans closest_to location;
		isIdle <-false; 
		eatingCounter <-50;//Time to eat and then make new zombie
		ask target{
			do descriptiveDeath;
		}
		write name+": Nom nom nom";
	}
	
	//Wait around a bit after killing someone.
	reflex eatPerson when: eatingCounter !=0{
		//Gory animation
		textBubble <- "Eating";
		eatingCounter<- eatingCounter -1;
		if(eatingCounter = 0){
			create Zombie with:(location:location+{0,0,0});
		}
	}
	
	//When no humans in sight, wander around
	reflex becomeIdle when: empty(humansInSight) and eatingCounter = 0{
		textBubble <- "Brains";
		isIdle <- true;
	}
}

//Avoids zombies
//needs to eat (not people)
species Guest parent: Human {
	rgb myColor <- #green;
	//Flee from zombies, by running in opposite direction..
	reflex avoidZombies when: !empty(zombiesInSight){
		do fleeFromZombies;		
	}
	
	//When not hungry and safe.
	reflex becomeIdle when: (empty(zombiesInSight) and !isHungry){
		textBubble <-"";
		isIdle<-true;
	}
	
	float threshold <- rnd(5.0,20.0);
	int timeToForget <- 0 update:timeToForget -1 min:0;
	
	//Forget about a bad place after some time	
	reflex forgetAboutBadFoodStalls when: timeToForget =1 {
		write name+ " forgot about bad place...";
		if(!empty(badFoodStalls)){
			badFoodStalls <- badFoodStalls - one_of(badFoodStalls);
		}		
	}
}

species Punk parent:Guest {
	rgb myColor <- #hotpink;
	float aggression <- rnd(0.3,0.7);
	
	//Punks don't like beingin places that are too chill.
	bool dontLikeStall {
		if(targetFoodStall = nil) {
			return false;
		} else if (agents_inside(targetFoodStall) contains (self) and targetFoodStall.chillness >= threshold){
			return true;
		}
		return false;
	}
		
	action leaveFoodStall{
		badFoodStalls <- badFoodStalls + targetFoodStall;
		timeToForget <- 50;
		targetFoodStall <- nil;
		textBubble <- "Annoyed";
		isIdle <- true;
	}
	
	reflex leaveDueToChill when: dontLikeStall() {
		write name + " hate this place " + targetFoodStall.name + ": " + targetFoodStall.chillness;
		do leaveFoodStall;
	}
}


species Hippie parent:Guest {
	rgb myColor <- #purple;
	float cool <- rnd(0.7,0.9);
}


// Follows technicians.
// Attacks zombies.
// Shoots at people near the radio tower.
species Soldier parent: Human{
	//Technicians desired position of soldier
	point escort<-nil;
	//Range of firing gun
	float range <- rnd(5.0,10.0);
	//Percent chance of hitting target
	float accuracy <- rnd(0.5,0.85);
	rgb myColor <- #blue;
	
	//Small timer to prevent soldier from firing every cycle. Reloading or aiming.
	int reloadingCounter <- 0 update: reloadingCounter-1 min:0;
	
	//Is the gun ready to fire?
	bool readyToFire <- true update: reloadingCounter = 0;
	
	//Zombies we can shoot	
	list<Zombie> zombiesWithinRange -> {Zombie where(each.location distance_to location < range)};	

	//Shoots at closest zombie in shooting range, if we are ready to fire.
	reflex shootAtZombie when: (!empty(zombiesWithinRange) and readyToFire) {
		isIdle <-false;
		textBubble <- "Shooting";
		if(flip(accuracy)){
			write name+": Hit";
			ask zombiesWithinRange closest_to location{
				do die;
			}
		} else {
			write name+": Missed";
		}
		reloadingCounter <- 8;
	}
	
	//Optional reflex, for what to do when zombie is near but gun is not loaded, and when not guarding a technician
	reflex fleeWhileReloading when: (!empty(zombiesInSight) and !readyToFire and escort = nil) {
		//Could flee from zombie, or stand ground while reloading.
		do fleeFromZombies;	
	}

	//If you want Soldiers to hunt zomibes, change to zombiesInSight.
	reflex becomeIdle when: empty(zombiesInSight) {
		if(!readyToFire){
			textBubble <- "reloading";
		} else {
			textBubble <- "";
		}
		if(escort = nil){
			isIdle <-true;	
		}
	}
	
	reflex kickOutPunks when: (targetFoodStall != nil){
		 if (agents_inside(targetFoodStall) contains (self) and targetFoodStall.chillness < targetFoodStall.rowdiness/2 and targetFoodStall.chillness != 0){
			Punk punk <- Punk(one_of(agents_inside(targetFoodStall) where(each is Punk)));
			write name+" : Right, that's enough racket! C="+targetFoodStall.chillness +", "+targetFoodStall.rowdiness;
			ask punk{
				write name+": Bloody copper! I was only having a laugh...";
				self.location <- location +2;
				do leaveFoodStall;
			}
		}
	}
	
	reflex EscortTechnician when:escort!=nil and safetyBunker = nil{
		isIdle<-false;
		if self.location!=escort{
			do goto target:escort;
		}
	}
	
}

//Stays a distance away from zombies based on "bravery"
//Goal is to get to a radio tower, and repair it based on engineering_skill
//Then get to bunker
species Technician parent: Human{
	float engineering_skill <- rnd(0.5,2.0); //How fast they repair the tower
	float ProtectRange<-rnd(4.0, 5.0);
	
	RadioMast tower;
	rgb myColor <- #yellow;
	list nearbySoldiers -> {Soldier where(each.location distance_to location<sightRange)};
	
	init {
		tower <- one_of(RadioMast);
	}
	
	//Happen every tick when there are soldiers nearby
	reflex FixTheRadioMast when:(!empty(nearbySoldiers) and self.location=tower.location){
		write name +": fixing tower";
		ask RadioMast{
			progress <- progress + myself.engineering_skill;
		}
	}

	//Technicians have enough food to feed themselves....
	reflex FeedMyself when:hunger>=100{
		hunger<-0;
	}
	
	reflex askSoldierToAccompany when: !empty(nearbySoldiers) and safetyBunker = nil{
		float arc <- 0.0;
		list SoldierNear<-[];
		loop soldier over: nearbySoldiers{
			arc<-30.0*length(SoldierNear);
			SoldierNear<-SoldierNear+soldier;
			float a<-sin(arc)*5;
			float b<-cos(arc)*5;
			float new_x<-location.x+b;
			float new_y<-location.y+a;
			ask soldier{
				hunger <- 0;
				escort<-{new_x, new_y,0};
			}
		}
		isIdle<-false;
	}
	
	//Flee from zombies, by running in opposite direction, when there aren't soldiers to protect you..
	reflex avoidZombies when: empty(nearbySoldiers) and !empty(zombiesInSight){
		do fleeFromZombies;		
	}
	
	//Whilst not protected by soldiers, or hunted by zombies, wander around looking for Soldiers
	reflex becomeIdle when: empty(zombiesInSight) and empty(nearbySoldiers) and safetyBunker = nil{
		isIdle <- true;
	}
	
	//Head towards the radioMast when you have soldiers to protect you.
	reflex GotoTower when:!empty(nearbySoldiers) and safetyBunker = nil{
		do goto target:tower.location;
	}
	
	
}

//A place where people can get food.
species FoodStall {
	//How rowdy the stall is
	float rowdiness <- 0.0 min:0.0;
	
	//How chill the stall is
	float chillness <- 0.0 min:0.0;
	init {
		shape <- square(5);
	}
	
	reflex calculateValues {
		rowdiness <-0.0;
		chillness <-0.0;
		loop human over: agents_inside(self){
			if (human is Punk){
				rowdiness <- rowdiness + Punk(human).aggression;
				chillness <- chillness - Punk(human).aggression;
			} else if (human is Hippie){
				chillness <- chillness + Hippie(human).cool;
			}
		}
	}
	
	aspect default {
		draw shape at: location color: #green;
		draw name at: location color:#black;
	}
}

//Saves people and kills Zombies
species Bunker skills:[fipa]{
	int size <- 20;
	init {
		shape <- circle(size);
	}
	list<Human> humansInBunker -> {list<Human>(agents_inside(shape) where(each is Human))};
	list<Zombie> zombiesInBunker -> {list<Zombie>(agents_inside(shape) where(each is Zombie))};
	bool isActive <- false;
	
	//Bunker has enough food to last a long, long, long time.
	reflex feedPeople when:(!empty(humansInBunker) and isActive){
		loop human over: humansInBunker{
			ask human {
				hunger <- 0;
			}
		}
	}
	//Automated Turrets kill all zombies inside the bunker
	reflex killPeople when:(!empty(zombiesInBunker) and isActive){
		loop zombie over: zombiesInBunker{
			ask zombie {
				do die;
			}
		}
	}
	
	//Appear on the map, start killing zombies and feeding people inside yourself.
	reflex activate when:(!empty(informs)){
		string trash <- (informs at 0).contents;//Trash message
		isActive <- true;
	}
	
	aspect default {
		//Only show when activated by RadioMast
		if(isActive){
			draw shape at: location color: #gold;	
		}
	}
}

//Needs to be fixed/configured by a technician, so that it can broadcast the location of a safe space to everyone.
//Technicians know the location of the RadioMast 
species RadioMast skills:[fipa]{
	//Progress to broadcast
	float progress <- 0.0 max:100.0;
	//Only 1 broadcast will be sent out.
	bool broadCastSent <- false;
	Bunker safeSpace;
	
	init {
		safeSpace <- one_of(Bunker);
	}
	
	//Send a message to all humans about the location of the safe space
	reflex sendMessage when: (progress = 100 and !broadCastSent){
		write "Sending broadcast. Salvation is at hand!";
		do start_conversation to: list(safeSpace) protocol: 'no-protocol' performative: 'inform' contents: [];
		do start_conversation to: list(agents where(each is Human)) protocol: 'no-protocol' performative: 'inform' contents: [safeSpace];
		broadCastSent <- true;
	}
	aspect default{
		draw cylinder(3.5,15) at:location color:#cyan;
		draw cylinder(5,5) at:location + {0,0,15} color:#cyan;
	}
}

experiment main type: gui{
	output{
		display Population_Information {
			chart "Population" type: series size: {1,0.5} position: {0, 0} {
  				 data "Zombies" value: zombies color: #black ;
				 data "Humans" value: humans color: #green ;
   			}
		}
		
		display map type: opengl{
			species Zombie aspect: default;
			species Soldier aspect: default;
			species Guest aspect: default; 
			species Technician aspect:default;
			species FoodStall aspect: default;
			species Bunker aspect:default;
			species RadioMast aspect:default;
			species Punk aspect:default;
			species Hippie aspect:default;
		}

	}
}


/* Insert your model definition here */

