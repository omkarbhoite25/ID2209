/**
* Name: FinalAssignment
* Based on the internal empty template. 
* Author: Filip
* Tags: 
*/


//Need 2 different places people can meet.
//Show number of zombies over time
//Vs peple and soldiers

//

model FinalAssignment
global{
	geometry shape <- square(200#m);
	int zombies -> {length(Zombie)};
    int humans -> {length(agents where(each is Human))};
	init{
		int scenario <- 0 ;
		if scenario = 0{
			create FoodStall number:3;
			create Zombie number: 5;
			create Guest number: 40;
			create Soldier number: 1;
		} else if scenario = 1 {
			//Testing a single soldier shooting & fleeing.
			create Zombie with: (location:{50,60,0});
			create Soldier with: (location:{50,50,0});
			create Zombie with: (location:{50,40,0});
		} else if scenario = 2 {
			//Testing Technician with Protecting Soldier, vs Zombies.
			//Soldier should not flee?
			create Zombie with: (location:{50,65,0});
			create Soldier with: (location:{50,50,0});
			create Technician with: (location:{50,55,0});
			create Zombie with: (location:{50,35,0});
		}
		//create Hero number: 1;
		

	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
species Base_Person skills:[moving]{
	init{
		speed <- 1.0;	
	}
	rgb myColor <- #aqua;
	float sightRange <- 20.0;
	bool isIdle <- true;
	string textBubble <-"";
	
	aspect default{
		draw sphere(1) at: {location.x,location.y,location.z+2} color:myColor;
		draw pyramid(2) at: location color:myColor;		
		draw string(textBubble) at:location+{-3,0,4};
	}
	
	reflex beIdle when: isIdle{
		do wander amplitude:90.0;
	}
}

//Used to categorize all humans, as opposed to zombies.
species Human parent: Base_Person {
	list<string> funnyDeaths <- ["Blergh", "Oh no!", "Argh!", "Cruel world!", "Damn!", "I died!"];
	
	action descriptiveDeath{
		write name+":"+one_of(funnyDeaths)+"X(";
		do die;
	}
	list zombiesInSight -> { list<Zombie>(Zombie at_distance(sightRange))};
	
	action fleeFromZombies{
		isIdle <-false;
		textBubble <- "Fleeing";
		//Zombie enemy <- zombiesInSight closest_to(location);
		float newHeading <- 0.0;
		
		//Naive way of handling multiple zombies, where we look to find avoid every zombie equally. 
		//Will run to opposite direction with 1 zombie, succesfully avoid 2 opposite each other, and attempt to handle more.
		//Could be elaborated with weights depending on enemy distance to ourselves.
		loop enemy over: zombiesInSight{
			//Opposite of angle towards enemy
			float oppositeOfEnemy <- 180+(atan2(enemy.location.y-location.y, enemy.location.x-location.x));
			newHeading <- newHeading+oppositeOfEnemy;
		}
		//Take the mean of all angles that avoid zombies. Simplistic, but works for a lot of cases.
		newHeading <- newHeading / length(zombiesInSight);
		
		//If we are at a world edge, we should avoid moving into the wall..
		int x <- 90;
		if location.y <= 2 { //top wall
			newHeading <- newHeading+x;
		} else if location.y >= world.shape.height-2 {//bottom wall
			newHeading <- newHeading+x;
		}
		if location.x <= 2{//left wall
			newHeading <- newHeading+x;
		} else if location.x >= world.shape.width-2{
			newHeading <- newHeading+x;//right wall
		}
		do move heading:newHeading ;
	}
}

//Wants to eat people
species Zombie parent: Base_Person {
	rgb myColor <- #black;
	init{
		sightRange <- rnd(15.0,20.0);
		speed <- rnd(0.8,0.9);
		write "Brains!";
	}
	
	//Keeps track of how many cycles remain to consume a person
	int eatingCounter <-0;
	
	//Range at which Zombie can eat people
	float killRange <- 2.0;
	
	//List of nearby Humans
	list<Human>  humansInSight -> {list<Human>(agents_at_distance(sightRange) where(each is Human))};
	
	//Humans that we can eat
	list<Human>  eatableHumans -> {list<Human>(agents_at_distance(killRange) where(each is Human))};
	
	//Hunt nearest person in sight
	reflex huntPeople when: !empty(humansInSight) and eatingCounter = 0{
		Base_Person target <- humansInSight closest_to location; 
		do goto target:target;
		textBubble <- "Hunting";
		isIdle <-false;
	}
	
	//Kill and eat a person, and delay for a few cycles while eating them
	reflex killPerson when: !empty(eatableHumans) {
		Human target <- eatableHumans closest_to location;
		isIdle <-false; 
		eatingCounter <-50;//Time to eat and then make new zombie
		ask target{
			do descriptiveDeath;
		}
		write name+": Nom nom nom";
	}
	
	//Wait around a bit after killing someone.
	reflex eatPerson when: eatingCounter !=0{
		//Gory animation
		textBubble <- "Eating";
		eatingCounter<- eatingCounter -1;
		if(eatingCounter = 0){
			create Zombie with:(location:location+{0,0,0});
		}
	}
	
	//When no humans in sight, wander around
	reflex becomeIdle when: empty(humansInSight) and eatingCounter = 0{
		textBubble <- "Brains";
		isIdle <- true;
	}
}

//Avoids zombies
//needs to eat (not people)
species Guest parent: Human {
	FoodStall targetFoodStall <- nil;
	rgb myColor <- #green;
	
	list<FoodStall> stallsWithinSight -> {FoodStall where(each.location distance_to location < sightRange)};
	
	//Hunger increases at a slow pace. 
	int starvationLevel <- 500;
	int hunger <- rnd(0,100) update: hunger + rnd(0,1) max: starvationLevel min:0;
	//When people get hungry, they start looking 
	bool isHungry -> hunger > 299;
	
	//Everyone begins knowing about a random food stall.
	list<FoodStall> knownFoodPlaces <- [one_of(FoodStall)];
	
	//Flee from zombies, by running in opposite direction..
	reflex avoidZombies when: !empty(zombiesInSight){
		do fleeFromZombies;		
	}
	
	//When a guest becomes hungry, they pick a place to eat food.
	reflex pickFoodStall when: (isHungry and targetFoodStall = nil){
		targetFoodStall <- knownFoodPlaces closest_to location;
	}
	
	//When not hungry and safe.
	reflex becomeIdle when: (empty(zombiesInSight) and !isHungry){
		textBubble <-"";
		isIdle<-true;
	}
	
	//When a guest is hungry, and not ffrom zombies, they head towards the food place	
	reflex moveTowardsFood when: (empty(zombiesInSight) and isHungry){
		textBubble <- "Hungry";
		isIdle <-false;
		do goto (targetFoodStall.location);
	}
	
	//Remembers new food stalls when they are in sight.
	reflex learnNewFoodPlace when: !empty(stallsWithinSight){
		loop newFoodPlace over: (stallsWithinSight where(!(knownFoodPlaces contains(each)))){
			knownFoodPlaces <- knownFoodPlaces + newFoodPlace;
		}
	}
	
	//While at food stall, eat food until no longer hungry
	reflex eatFood when:(targetFoodStall != nil and hunger !=0 and location distance_to targetFoodStall < 2) {
		hunger <- hunger - 10;
		textBubble <- "Eating";
		isIdle <- false;
	}
	
	//Resets target food stall when not hungry, or run away from zombies 
	reflex resetTargetFoodStall when:(targetFoodStall != nil and (hunger=0 or !empty(zombiesInSight))){
		targetFoodStall <-  nil;
	}
	
	//When the guest becomes too hungry, they die of starvation.
	reflex starveToDeath when: hunger = starvationLevel {
		write name+": Died of starvation";
		do die;
		if(flip(0.10)){create Zombie number: 1 with:(location:location);}
	}
	
	//Head towards stores
}

// Follows technicians.
// Attacks zombies.
// Shoots at people near the radio tower.
species Soldier parent: Human{
	//Range of firing gun
	float range <- rnd(5.0,10.0);
	//Percent chance of hitting target
	float accuracy <- rnd(0.5,0.85);
	rgb myColor <- #blue;
	
	//Small timer to prevent soldier from firing every cycle. Reloading or aiming.
	int reloadingCounter <- 0 update: reloadingCounter-1 min:0;
	
	//Is the gun ready to fire?
	bool readyToFire <- true update: reloadingCounter = 0;
	
	//Zombies we can shoot	
	list<Zombie> zombiesWithinRange -> {Zombie where(each.location distance_to location < range)};	

	//Shoots at closest zombie in shooting range, if we are ready to fire.
	reflex shootAtZombie when: (!empty(zombiesWithinRange) and readyToFire) {
		isIdle <-false;
		textBubble <- "Shooting";
		if(flip(accuracy)){
			write name+": Hit";
			ask zombiesWithinRange closest_to location{
				do die;
			}
		} else {
			write name+": Missed";
		}
		reloadingCounter <- 8;
	}
	
	//Optional reflex, for what to do when zombie is near but gun is not loaded
	reflex fleeWhileReloading when: (!empty(zombiesInSight) and !readyToFire) {
		//Could flee from zombie, or stand ground while reloading.
		do fleeFromZombies;	
	}

	//If you want Soldiers to hunt zomibes, change to zombiesInSight.
	reflex becomeIdle when: empty(zombiesInSight){
		if(!readyToFire){
			textBubble <- "reloading";
		} else {
			textBubble <- "";
		}
		isIdle <-true;
	}
}

//Stays a distance away from zombies based on "bravery"
//Goal is to get to a radio tower, and repair it based on engineering_skill
//Then get to bunker
species Technician parent: Base_Person{
	float bravery <- rnd(0.8,5.0); //How far away you stay from Zombies
	float engineering_skill <- rnd(0.5,2.0); //How fast they repair the tower
	float ProtectRange<-(5.0);
	rgb myColor <- #yellow;
	list<Soldier> nearbySoldiers -> {Soldier where(each.location distance_to location<sightRange)};
	
	reflex askSoldierToAccompany when: !empty(nearbySoldiers){
		ask nearbySoldiers closest_to location{
			write 'Dying :'+name; 
			do die;
		}
		isIdle<- false;
	}
	
	reflex becomeIdle when: empty(nearbySoldiers){
		isIdle <- true;
	}
}

//Acts like Guest
//
species Hero parent: Human{
	float bravery <- rnd(0.8,5.0); //How far away you stay from Zombies
	float engineering_skill <- rnd(0.5,2.0); //How fast they repair the tower
	rgb myColor <- #orange;
}

//A place where people can get food.
species FoodStall {
	int foodStorage <- 10000 min:0;
	aspect default {
		draw square(5) at: location color: #green;
	}
}

species Bunker {
	
}

//Needs to be fixed/configured by a technician, so that it can broadcast the location of a safe space to everyone.
//Technicians know the location of the RadioMast 
species RadioMast skills:[fipa]{
	//Progress to broadcast
	float progress <- 0.0 max:100.0;
	//Only 1 broadcast will be sent out.
	bool broadCastSent <- false;
	
	//Send a message to all humans about the location of the safe space
	reflex sendMessage when: (progress = 0 and !broadCastSent){
		
	}
}

experiment main type: gui{
	output{
		display map type: opengl{
			species Zombie aspect: default;
			species Soldier aspect: default;
			species Guest aspect: default; 
			species Technician aspect:default;
			species Hero aspect:default;
			species FoodStall aspect: default;
			
		}
		display Population_Information {
			chart "Population" type: series size: {1,0.5} position: {0, 0} {
   				 data "Zombies" value: zombies color: #black ;
				 data "Humans" value: humans color: #green ;
    		}
		}
	}
}


/* Insert your model definition here */

